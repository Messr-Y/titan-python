import torch
import torchvision
from torch.utils.data import DataLoader
from torchvision.models.detection import FasterRCNN
from torchvision.models.detection.rpn import AnchorGenerator
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
from torchvision.transforms import transforms
from torchvision.utils import draw_bounding_boxes
from PIL import Image, ImageDraw
import numpy as np
import matplotlib.pyplot as plt
import xml.etree.ElementTree as ET
import torch.nn.functional as F
import os
os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"] = "0" # 指定使用的GPU编号
os.environ['CUDA_LAUNCH_BLOCKING'] = '1'


transforms_val = transforms.Compose([transforms.Resize((224, 224)),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])





# 定义模型
model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
num_classes = 3  # VOC数据集中的类别数
in_features = model.roi_heads.box_predictor.cls_score.in_features
model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)
anchor_generator = AnchorGenerator(sizes=((32, 64, 128, 256, 512),), aspect_ratios=((0.5, 1.0, 2.0),))
roi_pooler = torchvision.ops.MultiScaleRoIAlign(featmap_names=['0'], output_size=7, sampling_ratio=2)
model.rpn_anchor_generator = anchor_generator
model.roi_heads.box_roi_pool = roi_pooler
# 加载模型参数
# checkpoint = torch.load('../checkHelmet.pth') # 检测安全帽
checkpoint = torch.load('../checkCoat.pth') # 检测防护服
# checkpoint = torch.load('../checkGlove.pth') # 检测绝缘手套
model.load_state_dict(checkpoint['state_dict'])
# 设置模型为评估模式并将其移动到指定的设备上
model.eval()
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
model.to(device)

image = Image.open('img40.jpg')
# 对图片进行预处理
transform = transforms.Compose([
    transforms.Resize((800, 800)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])
image_tensor = transform(image)
image_tensor = image_tensor.to(device)

# 使用模型进行预测
with torch.no_grad():
    output_1 = model([image_tensor])

image = image.resize((800 ,800))

draw = ImageDraw.Draw(image)
for box, score, label in zip(output_1[0]['boxes'], output_1[0]['scores'], output_1[0]['labels']):
    if score > 0.6:
        if label.item() == 2:
            draw.rectangle(box.tolist(), outline='red')
        elif label.item() == 1:
            draw.rectangle(box.tolist(), outline='green')
image.show()
